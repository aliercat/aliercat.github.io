<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>godot类的继承研究</title>
    <link href="/2025/03/15/godot%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E7%A0%94%E7%A9%B6/"/>
    <url>/2025/03/15/godot%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Godot类继承"><a href="#Godot类继承" class="headerlink" title="Godot类继承"></a>Godot类继承</h2><p>学习Godot的类继承，运行时发现子类未隐式调用父类的<code>_ready()</code>：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 子类-animal.gd</span><span class="token keyword">extends</span> <span class="token string">"res://Scripts/base_animal.gd"</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'animal._ready() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 父类-base_animal.gd</span><span class="token keyword">extends</span> <span class="token class-name">CharacterBody2D</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'base_animal._ready() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个时候的输出只会输出：  </p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript">animal<span class="token punctuation">.</span><span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> called<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果注释掉子类中的<code>_ready()</code>函数，就会直接调用父类的<code>_ready()</code>。  </p><p>尝试用构造函数<code>_init()</code>进行测试：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 子类-animal.gd</span><span class="token keyword">extends</span> <span class="token string">"res://Scripts/base_animal.gd"</span><span class="token keyword">func</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'animal._init() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 父类-base_animal.gd</span><span class="token keyword">extends</span> <span class="token class-name">CharacterBody2D</span><span class="token keyword">func</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'base_animal._init() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这时子类和父类的打印都会输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript">base_animal<span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> calledanimal<span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> called<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>查阅<a href="https://docs.godotengine.org/zh-cn/4.3/tutorials/scripting/gdscript/gdscript_basics.html#classes">文档</a>：</p><blockquote><p>请注意，<code>_ready()</code>、<code>_process()</code> 等（在文档中标为 <code>virtual</code> 且以下划线开头的）虚方法不受此限制。这些方法是专门用于自定义引擎行为的方法，可在 GDScript 中覆盖。信号、通知也可用于自定义引擎行为。</p></blockquote><p>这说明父类的<code>_ready()</code>是会被子类的<code>_ready()</code>覆盖的–当然前提是子类重载了它。</p><p>实际上<code>_init()</code>也是虚方法，为什么不会被覆盖呢？我查看了引擎内的文档：</p><blockquote><p>● void _init() virtual</p><p>实例化对象的脚本时调用，通常是在对象在内存中初始化之后（通过 GDScript 中的 Object.new() 或 C# 中的 new GodotObject）。也可以将其定义为接受参数的形式。该方法类似于大多数编程语言中的构造函数。</p><p>注意：如果为 _init() 定义了必填的参数，则带脚本的 Object 只能直接创建。使用任何其他方式（例如 PackedScene.instantiate() 或 Node.duplicate()）创建时，该脚本的初始化都将失败。</p></blockquote><p><code>_ready()</code>是这么描述的：</p><blockquote><p>● void _ready() virtual</p><p>当节点“就绪”时被调用，即当节点及其子节点都已经进入场景树时。如果该节点有子节点，将首先触发子节点的 _ready() 回调，稍后父节点将收到就绪通知。</p><p>对应 Object._notification() 中的 NOTIFICATION_READY 通知。另请参阅用于变量的 @onready 注解。</p><p>通常用于初始化。对于更早的初始化，可以使用 Object._init()。另见 _enter_tree()。</p><p>注意：该方法对于每个节点可能仅调用一次。从场景树中移除一个节点后，并再次添加该节点时，将不会第二次调用 _ready()。这时可以通过使用 request_ready()，它可以在再次添加节点之前的任何地方被调用。</p></blockquote><p>根据这里的介绍，我猜测是因为<code>_init()</code>初始化更早，它是在实例化对象的脚本时调用的。子类脚本实例化的时候肯定要先实例化父类脚本，因此会依次调用<code>_init()</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除构造函数外，其他的虚函数仍会被子类的同名函数覆盖。若想调用父类的<code>_ready()</code>，两种方法：</p><ol><li>子类不写<code>_ready()</code></li><li>在子类中调用父类同名函数： <figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 子类-animal.gd</span><span class="token keyword">extends</span> <span class="token string">"res://Scripts/base_animal.gd"</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>    <span class="token function">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 或者 super._ready()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/15/hello-world/"/>
    <url>/2025/03/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>First Test</title>
    <link href="/2025/01/22/First-Test/"/>
    <url>/2025/01/22/First-Test/</url>
    
    <content type="html"><![CDATA[<p>第一个blogs, test</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
