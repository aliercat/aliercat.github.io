<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>项目farm的UI逻辑</title>
    <link href="/2025/03/31/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84UI%E9%80%BB%E8%BE%91/"/>
    <url>/2025/03/31/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84UI%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<p>在项目中，UI的逻辑也很重要。首先需要确定相对于显示的场景物体而言，项目应该用多大尺寸作为预设开发。</p><p>在Godot中，游戏世界的可见区域叫做视口（Viewport），它决定如何将游戏内容渲染到屏幕上；窗口（Window）是操作系统层面的窗口。</p><blockquote><p>在Godot针对桌面平台开发时，视口大小也是初始化的窗口大小</p></blockquote><p>由于要开发一款类似桌面牧场的项目，项目的视口不能像通常的分辨率如640x320(16:9)，320x240(4:3)一样设置，本项目采用640x160(4:1)的视口，在场景中的Camera2D的Zoom采用2，这样显示时ai小鸡的移动不会有“掉帧”的感觉；这个时候实际渲染的尺寸就会变成320x80，相当于这里的每个像素映射到640x160窗口的四个像素，这样做后ai小鸡移动的“掉帧”现象就消失了，如<a href="#1">图1</a>。</p><blockquote><p>我在摄像头范围的边缘加了边界，ai小鸡掉到边界地面上，移动的范围不会超过摄像头的捕捉范围</p></blockquote><p><a id='1'></a><br><img src="/../image/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84UI%E9%80%BB%E8%BE%91/image1.png" alt="图1"><br>但Zoom&#x3D;2会导致另一个问题：这个相当于放大镜观察，如果要设置游戏内UI，怎么布局UI的位置呢，总不能手动调整吧？</p><p><strong>CanvasLayer</strong>解决了这一问题，作为一个独立渲染的结点，可以继续在原视口640x160中布局绘制，CanvasLayer会保证UI始终完整地显示在屏幕上，不受摄像机位置&#x2F;缩放的影响。</p><p><a href="#2">图2</a>是我设计的UI界面，放在游戏世界结点下的CanvasLayer中，在编辑器中效果如<a href="#3">图3</a>，可以看到它实际还是占了640x160的布局，但是运行起来后，效果如<a href="#4">图4</a>。<br><a id='2'></a><br><img src="/../image/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84UI%E9%80%BB%E8%BE%91/image2.png" alt="图2"><br><a id='3'></a><br><img src="/../image/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84UI%E9%80%BB%E8%BE%91/image3.png" alt="图3"><br><a id='4'></a><br><img src="/../image/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84UI%E9%80%BB%E8%BE%91/image4.png" alt="图4"></p><blockquote><p>中间的小方格子渲染被我重置了，不用在意，我的项目背景是透明的，所以看得到我的编辑器</p></blockquote><p>目前这个UI就是我预备要做的仓库UI，用来收集收获的动物产物。</p>]]></content>
    
    
    <categories>
      
      <category>Farm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Godot</tag>
      
      <tag>UI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目farm的类的逻辑</title>
    <link href="/2025/03/21/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84%E7%B1%BB%E7%9A%84%E9%80%BB%E8%BE%91/"/>
    <url>/2025/03/21/%E9%A1%B9%E7%9B%AEfarm%E7%9A%84%E7%B1%BB%E7%9A%84%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>设计项目中各动物、产物的类的逻辑</p><h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><p>目前有动物、产物两大类别，随项目完善，类逻辑会逐渐填充并更新</p><h3 id="动物"><a href="#动物" class="headerlink" title="动物"></a>动物</h3><p>项目中，动物首先作为AI型物体，需要根据脚本设计自行移动并判断碰撞边缘，因此，基类为<code>Node2D-&gt;...-&gt;CharactorBody2D</code>。在此基础上创建<code>BaseAnimal</code>类。</p><p><code>BaseAnimal</code>需要实现的功能为所有动物都需要的功能（目前）：</p><ul><li>自主移动</li><li>碰撞检测</li><li>动画切换</li><li>拖拽移动（动物可以被鼠标提起并移动）</li></ul><p><code>BaseAnimal</code>结点下需要一个Timer用于进行动画切换。</p><hr><p>动物分为幼崽和成熟个体，因此设计两个子类<code>AnimalBaby</code>和<code>Animal</code>类：</p><p><code>AnimalBaby</code>需要实现的额外功能：</p><ul><li>计时器（成长天数）</li><li>长大（替换模型）</li></ul><p><code>Animal</code>需要实现的额外功能：</p><ul><li>计时器（产出天数）</li><li>产出产物（新增产物模型）</li></ul><p>此处的计时器信号由世界场景中的计时器<code>Timer</code>发出, 由动物负责接受信号并长大或产出产物。<code>结点内的计时器只负责切换动物动画状态</code></p><p>对应地，子类个体如小鸡和鸡分别为上面两个类的子类，需要修改的部分仅为 <code>成长天数或产出天数&amp;模型</code></p><blockquote><p>后续或许可以添加价格相关属性？</p></blockquote><h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><p>目前的设想的产品的基本属性和功能为：</p><ul><li>买入价格</li><li>卖出价格</li><li>折扣（实际买入价格会在折扣后计算）</li><li>是否可被加工</li><li>点击收取进仓库</li></ul>]]></content>
    
    
    <categories>
      
      <category>Farm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Godot</tag>
      
      <tag>Class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>godot自定义信号</title>
    <link href="/2025/03/16/godot%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%A1%E5%8F%B7/"/>
    <url>/2025/03/16/godot%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>godot自定义信号很简单。对于Signal类，文档中是这样描述的：</p><blockquote><p><strong>类: Signal</strong><br>代表 Object 中某个信号的内置类型。<br><strong>描述</strong><br>信号 <code>Signal</code> 是内置的 <code>Variant</code> 类型，代表 <code>Object</code> 实例的某个信息。信号和所有 <code>Variant</code> 类型一样，可以在变量中存储、传递给函数。信号能够让所有连接的 <code>Callable</code>（及相应扩展对象）监听事件并作出反应，不必直接互相引用。这样就能让代码更灵活、更易于管理。<br>在 <code>GDScript</code> 中，信号可以使用 <code>signal</code> 关键字声明。在 C# 中，你可以在代理上使用 <code>[Signal]</code> 属性。</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token operator">></span><span class="token keyword">signal</span> attacked<span class="token operator">></span><span class="token comment"># 可以声明额外的参数。</span><span class="token operator">></span><span class="token comment"># 这些参数必须在发出信号时传递。</span><span class="token operator">></span><span class="token keyword">signal</span> <span class="token function">item_dropped</span><span class="token punctuation">(</span>item_name<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里我称呼Callable所在的函数叫<strong>回调函数</strong></p></blockquote><p>一般我会用这个方法来发出信号和连接对应的回调函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 发出信号</span>void <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> vararg <span class="token keyword">const</span><span class="token comment"># 连接函数</span>int <span class="token function">connect</span><span class="token punctuation">(</span>callable<span class="token punctuation">:</span> <span class="token class-name">Callable</span><span class="token punctuation">,</span> flags<span class="token punctuation">:</span> <span class="token class-name">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个Callable类的参数就是调用的函数名，flags默认就是延迟连接，即在当前帧的末尾触发。</p><p>我的项目中目前使用信号的过程是这样的：</p><blockquote><p><code>Node2</code>时间管理结点 – 绑定time_manager.gd</p><ul><li><code>Timer</code>子结点，该结点默认的timeout()连接到_on_timer_timeout()</li></ul></blockquote><blockquote><p><code>BaseAnimal</code>动物结点 – 绑定base_animal.gd</p></blockquote><p>时间管理结点在代码中类似这样：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># time_manager.gd</span><span class="token keyword">extends</span> <span class="token class-name">Node2D</span><span class="token keyword">signal</span> <span class="token function">day_passed</span><span class="token punctuation">(</span>current_day<span class="token punctuation">)</span><span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 每天现实时间</span><span class="token keyword">var</span> second_per_day <span class="token operator">=</span> <span class="token number">2.0</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span><span class="token variable">$Timer</span><span class="token punctuation">.</span>wait_time <span class="token operator">=</span> second_per_day<span class="token variable">$Timer</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Timer 连接</span><span class="token keyword">func</span> <span class="token function">_on_timer_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>day <span class="token operator">+=</span> <span class="token number">1</span>day_passed<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的逻辑是每隔<code>second_per_day</code>，触发一次<code>_on_timer_timeout()</code>函数，因为Timer默认计时结束后自动重新启动。<br>在<code>_on_timer_timeout()</code>中会触发我自定义的信号的emit，里面的<code>day</code>赋值给<code>current_day</code>并传递到回调函数中的参数。</p><p>动物节点的代码主要如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token keyword">class_name</span> <span class="token class-name">BaseAnimal</span> <span class="token keyword">extends</span> CharacterBody2D@<span class="token keyword">onready</span> <span class="token keyword">var</span> time_manager<span class="token punctuation">:</span> <span class="token class-name">Node2D</span> <span class="token operator">=</span> $<span class="token string">"../TimeManager"</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>    <span class="token comment"># 信号连接</span>time_manager<span class="token punctuation">.</span>day_passed<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>_on_day_passed<span class="token punctuation">)</span><span class="token comment"># 自定义的回调函数</span><span class="token keyword">func</span> <span class="token function">_on_day_passed</span><span class="token punctuation">(</span>day_num<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"signal received, day_num = "</span><span class="token punctuation">,</span> day_num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里在脚本加载时将<code>day_passed</code>信号和自定义的<code>_on_day_passed(day_num)</code>连接，这样信号<code>emit(day)</code>时就会调用连接的函数<code>_on_day_passed(day_num)</code>,这里的<code>day</code>会传递给信号定义时的<code>current_day</code>参数，然后再传递给<code>day_num</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>定义信号</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token keyword">signal</span> <span class="token function">day_passed</span><span class="token punctuation">(</span>current_day<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="2"><li>发出信号</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span>day_passed<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><ol start="3"><li>绑定信号和回调函数</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript">day_passed<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>_on_day_passed<span class="token punctuation">)</span><span class="token comment"># 自定义的回调函数</span><span class="token keyword">func</span> <span class="token function">_on_day_passed</span><span class="token punctuation">(</span>day_num<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"signal received, day_num = "</span><span class="token punctuation">,</span> day_num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出：</p><blockquote><p>signal received, day_num &#x3D; 1</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Godot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Godot</tag>
      
      <tag>Signal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>godot类的继承研究</title>
    <link href="/2025/03/15/godot%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E7%A0%94%E7%A9%B6/"/>
    <url>/2025/03/15/godot%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Godot类继承"><a href="#Godot类继承" class="headerlink" title="Godot类继承"></a>Godot类继承</h2><p>学习Godot的类继承，运行时发现子类未隐式调用父类的<code>_ready()</code>：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 子类-animal.gd</span><span class="token keyword">extends</span> <span class="token string">"res://Scripts/base_animal.gd"</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'animal._ready() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 父类-base_animal.gd</span><span class="token keyword">extends</span> <span class="token class-name">CharacterBody2D</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'base_animal._ready() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个时候的输出只会输出：  </p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript">animal<span class="token punctuation">.</span><span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> called<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果注释掉子类中的<code>_ready()</code>函数，就会直接调用父类的<code>_ready()</code>。  </p><p>尝试用构造函数<code>_init()</code>进行测试：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 子类-animal.gd</span><span class="token keyword">extends</span> <span class="token string">"res://Scripts/base_animal.gd"</span><span class="token keyword">func</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'animal._init() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 父类-base_animal.gd</span><span class="token keyword">extends</span> <span class="token class-name">CharacterBody2D</span><span class="token keyword">func</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'base_animal._init() is called'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这时子类和父类的打印都会输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript">base_animal<span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> calledanimal<span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> called<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>查阅<a href="https://docs.godotengine.org/zh-cn/4.3/tutorials/scripting/gdscript/gdscript_basics.html#classes">文档</a>：</p><blockquote><p>请注意，<code>_ready()</code>、<code>_process()</code> 等（在文档中标为 <code>virtual</code> 且以下划线开头的）虚方法不受此限制。这些方法是专门用于自定义引擎行为的方法，可在 GDScript 中覆盖。信号、通知也可用于自定义引擎行为。</p></blockquote><p>这说明父类的<code>_ready()</code>是会被子类的<code>_ready()</code>覆盖的–当然前提是子类重载了它。</p><p>实际上<code>_init()</code>也是虚方法，为什么不会被覆盖呢？我查看了引擎内的文档：</p><blockquote><p>● void _init() virtual</p><p>实例化对象的脚本时调用，通常是在对象在内存中初始化之后（通过 GDScript 中的 Object.new() 或 C# 中的 new GodotObject）。也可以将其定义为接受参数的形式。该方法类似于大多数编程语言中的构造函数。</p><p>注意：如果为 _init() 定义了必填的参数，则带脚本的 Object 只能直接创建。使用任何其他方式（例如 PackedScene.instantiate() 或 Node.duplicate()）创建时，该脚本的初始化都将失败。</p></blockquote><p><code>_ready()</code>是这么描述的：</p><blockquote><p>● void _ready() virtual</p><p>当节点“就绪”时被调用，即当节点及其子节点都已经进入场景树时。如果该节点有子节点，将首先触发子节点的 _ready() 回调，稍后父节点将收到就绪通知。</p><p>对应 Object._notification() 中的 NOTIFICATION_READY 通知。另请参阅用于变量的 @onready 注解。</p><p>通常用于初始化。对于更早的初始化，可以使用 Object._init()。另见 _enter_tree()。</p><p>注意：该方法对于每个节点可能仅调用一次。从场景树中移除一个节点后，并再次添加该节点时，将不会第二次调用 _ready()。这时可以通过使用 request_ready()，它可以在再次添加节点之前的任何地方被调用。</p></blockquote><p>根据这里的介绍，我猜测是因为<code>_init()</code>初始化更早，它是在实例化对象的脚本时调用的。子类脚本实例化的时候肯定要先实例化父类脚本，因此会依次调用<code>_init()</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除构造函数外，其他的虚函数仍会被子类的同名函数覆盖。若想调用父类的<code>_ready()</code>，两种方法：</p><ol><li>子类不写<code>_ready()</code></li><li>在子类中调用父类同名函数： <figure><div class="code-wrapper"><pre class="line-numbers language-gdscript" data-language="gdscript"><code class="language-gdscript"><span class="token comment"># 子类-animal.gd</span><span class="token keyword">extends</span> <span class="token string">"res://Scripts/base_animal.gd"</span><span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>    <span class="token function">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 或者 super._ready()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Godot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/15/hello-world/"/>
    <url>/2025/03/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
